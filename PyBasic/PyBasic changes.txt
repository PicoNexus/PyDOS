8/6/202: Most of the changes listed below have been merged into the original version of PyBasic
and no longer represent changes. The remaining differences are as follows:

* Richpl/PyBasic initializes array elements to zero or space, PyDOS/PyBasic throws an
error if an array element is used before being set
* Richpl/PyBasic adds an additional element to arrays in order to support both 0 based and
1 based indexing, PyDOS/PyBasic wraps arrays so that for an array dimensioned at 10,
 element 0 and and element 10 point to the same element reducing the memory used by arrays,
 especially 2 and 3 dimensional arrays
* Richpl/PyBasic requires a semicolon as print and input element seperators, PyDOS/PyBasic
also allows commas
* PyDOS/PyBasic doesn't load the basic program into memory and runs it directly line by
line from flash, this allows larger programs to be run on micro controllers with limited
RAM but at a significant speed cost.
* PyDOS/PyBasic user prompt changed from ">" to ":"
* The PI, RNDINT, TERNARY, LEFT$, RIGHT$ functions not supported in the PyDOS version
* The RND function does not take any arguments or even empty parenthesis in the PyDOS version
* The PyDOS version added a saved index source code option when saving or loading using the
.PGM extension on a program filename, this vastly speeds up subsequent program load times
* The PyDOS version added SOUND freq,duration[,volume] command. The Windows code uses the
winsound library and the Micropython/Circuit Python implementations assumes the
appropriate speaker circuit is connected to the GPIO pin defined in pydos_bcfg.py


----------------------------------------------------------------------------------------

* save and load from text file rather than pickle binary
* added command line argument functionality (breaks running outside of PyDOS environment)
* prompt changed from > to :
* added functionality to LIST command allow the specification of line or line range
* added single line compound statement support with : seperator
* change print delimeter from : to ; or ,
* added trailing ; to print statement to indicate print without end carriage return
* added TAB() function support to print statement
* added memory garbage collection before array creation attempts
* modified starting array element from 0 to 1 so that dim(10) created a 10 element array
* attempted to resolve branching out of active loop with goto and then returning to start of loop problem
* PI, RNDINT, TERNARY, INSTR functions removed
* VAL function modified slightly to work on micropython
* added support for numbered variable names i.e. a1, num9


6/13/21

* modified PyBasic to run Basic program in place on disk rather loading into memory
* added logic to allow this version of PyBasic to run on Windows platform in cPython as well as micro python
* added logic to allow tab() function to work across print statements continued with trailing ;
* added logic to ignore null tokens caused by trailing spaces
* added logic to prevent text of REM statements being evaluated as tokens and syntax checked


6/27/21

* modified mid$(s$,S,L) function so that an 'S' of 1 indicated the first char (not 0) of the substring and 'L' is
        the length rather than the ending position
* turned INSTR functionality back on
* modified INSTR to count the first string position as 1 instead of 0 and return a 0 if not found rather than -1
* added file I/O ('OPEN fn FOR access-type AS #f ELSE lineno', 'INPUT #f', 'PRINT #f', 'FSEEK #f,pos', 'CLOSE #f')
* added 'RESTORE lineno' command to DATA/read functionality
* modified the 'ON val GOTO/GOSUB line1,line2,...' to function in a more standard way
* *** disabled *** added %%memcollect directive which when placed as first token of a REM statement invokes a python memory 
        garbage collection during a BASIC file load operation *** Currently disabled in code ****
* added a saved index source code option when saving or loading using the .PGM extension on a program filename


6/28/21

* removed the "*" startup option and made the pre-allocation of memory happen on every load, this seems to reduce the 
         memory allocation errors when attempting to run large basic programs

7/3/21

* added SOUND freq,duration[,volume] command. The Windows code uses the winsound library and the Micropython implementation
         assumes the appropriate speaker circuit is connected to GPIO pin #20 

7/7/21

* Fixed a bug in the logic that removed null tokens which caused quoted space strings to be ignored


8/3/21

* Added Circuitpython support

9/4/21

* modified branching out of active loop fix to use class variables rather than passing arguments
